#:import Factory kivy.factory.Factory

<TextInput>:
    multiline: False
    size_hint: 1, None
    height: sp(28)

BoxLayout:
    pos: root.pos
    size: root.size
    padding: 10
    spacing: 10

    BoxLayout:
        orientation: 'vertical'
        size_hint: 0.5, 1

        BoxLayout:
            orientation: 'horizontal'
            size_hint: 1, 0.2

            Label:
                text: 'Click on cadran to set value.\nRight-click to add color sector.'
                size_hint: 1, None
            Button:
                size_hint: None, None
                height: sp(30)
                text: 'reset sectors'
                on_release:
                    print type(sm.sectors)
                    sm.sectors = []

        SpeedMeter:
            id: sm
            startAngle: startAngle.value
            endAngle: endAngle.value
            subtick: subtick.value
            displayFirst: displayFirst.active
            displayLast: displayLast.active
            labelRadiusRatio: labelRadiusRatio.value
            labelIconScale: labelIconScale.value

            on_value: display.text = str(self.value)

        Label:
            text: 'Value:'
            size_hint: 1, 0.1

        Label:
            id: display
            text: '0'
            size_hint: 1, 0.1

        Slider:
            size_hint: 1, 0.1
            min: sm.min
            max: sm.max
            value: sm.value
            value_track: True
            on_value: sm.value = self.value

    GridLayout:
        size_hint: 0.5, 1
        cols: 2
        spacing: 10

        Label:
            text: 'min (int)'
        TextInput:
            id: min
            text: str(sm.min)
            on_text_validate: sm.min = int(self.text)

        Label:
            text: 'max (int)'
        TextInput:
            id: max
            text: str(sm.max)
            on_text_validate: sm.max = int(self.text)

        Label:
            text: 'tick (int)'
        TextInput:
            id: max
            text: str(sm.tick)
            on_text_validate: sm.tick = int(self.text)

        Label:
        Label:
            text: str(int(sm.subtick))
        Label:
            text: 'subtick (int)'
        Slider:
            id: subtick
            min: 0
            max: 20
            step: 1

        Label:
            text: 'displayFirst'
        CheckBox:
            id: displayFirst
            active: True

        Label:
            text: 'displayLast'
        CheckBox:
            id: displayLast
            active: True

        Label:
        Label:
            text: str(int(sm.startAngle))
        Label:
            text: 'startAngle (float, -360..360)'
        Slider:
            id: startAngle
            min: -360
            max: 360
            step: 1
            value: -90

        Label:
        Label:
            text: str(int(sm.endAngle))
        Label:
            text: 'endAngle (float, -360..360)'
        Slider:
            id: endAngle
            min: -360
            max: 360
            step: 1
            value: 135

        Label:
            text: 'cadranColor (as hex)'
        Button:
            text: 'select color'
            on_release:
                dialog = Factory.ColorPickerDialog()
                dialog._exampleCallback = app._setCadranColor
                dialog.open()

        Label:
            text: 'label'
        TextInput:
            on_text_validate: sm.label = self.text

        Label:
        Label:
            text: str(sm.labelRadiusRatio)
        Label:
            text: 'labelRadiusRatio (float, -1..1)'
        Slider:
            id: labelRadiusRatio
            min: -1
            max: 1
            value: 0.3

        Label:
            text: 'labelIcon'
        Button:
            text: 'select icon'
            on_release:
                dialog = Factory.FileChooserDialog()
                dialog.open()

        Label:
        Label:
            text: str(sm.labelIconScale)
        Label:
            text: 'labelIconScale (float, 0..2)'
        Slider:
            id: labelIconScale
            min: 0
            max: 2
            value: 0.5

<ColorPickerDialog@ModalView>:
    id: colorpickerdialog
    size_hint: 0.9, 0.9
    BoxLayout:
        orientation: 'vertical'
        spacing: 20

        ColorPicker:
            id: colorpicker
        BoxLayout:
            spacing: 20
            Button:
                text: 'done'
                size_hint: None, None
                height: sp(30)
                on_release:
                    colorpickerdialog._exampleCallback(colorpicker.hex_color)
                    colorpickerdialog.dismiss()
            Button:
                text: 'cancel'
                size_hint: None, None
                height: sp(30)
                on_release:
                    colorpickerdialog.dismiss()

<FileChooserDialog@ModalView>:
    id: filechooserdialog
    size_hint: 0.9, 0.9
    BoxLayout:
        orientation: 'vertical'
        spacing: 20

        FileChooserIconView:
            id: filechooser        
            path: '.'
            on_submit:
                app.root.ids['sm'].labelIcon = filechooser.selection[0]
                filechooserdialog.dismiss()

        BoxLayout:
            spacing: 20
            Button:
                text: 'cancel'
                size_hint: None, None
                height: sp(30)
                on_release: filechooserdialog.dismiss()
            Button:
                text: 'remove icon'
                size_hint: None, None
                height: sp(30)
                on_release:
                    app.root.ids['sm'].labelIcon = ''
                    filechooserdialog.dismiss()
